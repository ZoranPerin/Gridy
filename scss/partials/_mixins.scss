// @include background-image(logo, png, 200px, 50px, center, no-repeat);
@mixin background-image($file, $type, $width, $height, $position, $repeat) {
	background-image: url('../img/' + $file + '.' + $type);
	background-position: $position;
	background-repeat: $repeat;
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
	    only screen and (-moz-min-device-pixel-ratio: 2),
	    only screen and (-o-min-device-pixel-ratio: 2/1),
	    only screen and (min-device-pixel-ratio: 2),
	    only screen and (min-resolution: 192dpi),
	    only screen and (min-resolution: 2dppx){
	    & {
			background-image: url('../img/' + $file + '-2x.' + $type);
			-webkit-background-size: $width $height;
			-moz-background-size: $width $height;
			-o-background-size: $width $height;
			background-size: $width $height;
	    }
	}
}

// @include border-radius(5px);
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	border-radius: $radius;
	background-clip: padding-box;
}

// @include box-sizing(border-box);
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model;
	-moz-box-sizing: $box-model;
	box-sizing: $box-model;
}

// @include breakpoint(xs) {}
@mixin breakpoint($class) {

  @if $class == xs {
    @media (max-width: 767px) { @content; }
  }

  @else if $class == sm {
    @media (max-width: 991px) { @content; }
  }

  @else if $class == md {
    @media (max-width: 1199px) { @content; }
  }
  
  @else if $class == lg {
    @media (min-width: 1200px) { @content; }
  }

}

// @include clearfix;
@mixin clearfix {
    &:before, &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
    *zoom: 1;
}

// @include column(2);
@mixin column($value) {
	width: (100/12) * $value + 0%;
}

// @include list-reset;
@mixin list-reset {
	list-style: none;
	margin: 0;
	padding: 0
}

// @include opacity(0.8);
@mixin opacity($value) {
    $IEValue: $value * 100;
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
    filter: alpha(opacity=$IEValue);
}

// @include responsive-img;
@mixin responsive-img {
    display: block;
    height: auto;
    max-width: 100%;
    min-width: 100%;
}

// @include text-truncate;
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// @include transition(all .2s linear);
@mixin transition($args) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

// @include vertical-align;
@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}